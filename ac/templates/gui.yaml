---
apiVersion: v1
kind: ConfigMap
metadata:
  name: gui-config
  namespace: {{ .Values.namespace }}
data:
  # initial nginx.conf file used to call certbot.
  # certbot will update this file with SSL configuration
  nginx.conf: |-
    events {
        worker_connections 1024;
    }

    http {
      server_tokens off;
      # IMPORTANT: mime.types are required, otherwise react app
      # won't load SVGs and CSS files in the right way
      include /etc/nginx/mime.types;

      server {
        listen 80;
        listen  [::]:80;
        {{- if .Values.domains.http }}
        server_name  {{ .Values.domains.http }} www.{{ .Values.domains.http }};
        {{- end }}

        location / {
          root /etc/nginx/html/html;
          index  index.html index.htm;
          try_files $uri $uri/ /index.html;
        }

        location /api {
          {{- if .Values.gui.ssl.enable }}
          proxy_pass https://api-server-svc.{{ .Values.namespace }}.svc.cluster.local:443;
          {{- else }}
          proxy_pass http://api-server-svc.{{ .Values.namespace }}.svc.cluster.local:80;
          {{- end }}
          proxy_set_header X-Forwarded-For $remote_addr;
          proxy_set_header Host            $http_host;
        }
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ac-gui
  namespace: {{ .Values.namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ac-gui
  template:
    metadata:
      labels:
        app: ac-gui
    spec:
      containers:
      - name: ac-gui
        image: {{ .Values.gui.image }}
        env:
          {{- if .Values.mosquitto.ssl.enable }}
          - name: CERTBOT_EMAIL
            value: {{ .Values.gui.ssl.certbot.email }}
          - name: CERTBOT_DOMAIN
            value: {{ .Values.domains.http }}
          - name: CERTBOT_SERVER
            # use https://acme-staging-v02.api.letsencrypt.org/directory for staging server
            value: {{ .Values.gui.ssl.certbot.server }}
          {{- end }}
          - name: BASE_NGINX_CONF_FILEPATH
            value: "/home/nginx.conf"
          - name: NGINX_CONF_HOSTPATH
            value: "/home/nginx-conf/nginx.conf"
        ports:
          # always enabled to redirect to https and for certbot
          - name: http
            containerPort: 80
            protocol: TCP
          {{- if .Values.gui.ssl.enable }}
          - name: https
            containerPort: 443
            protocol: TCP
          {{- end }}
        volumeMounts:
          - name: gui-config
            mountPath: /home/nginx.conf
            subPath: nginx.conf
            readOnly: true
          - name: nginx-conf-storage
            mountPath: "/home/nginx-conf/"
          {{ if .Values.gui.ssl.enable }}
          - name: lets-encrypt-ssl-storage
            mountPath: "/etc/letsencrypt/"
          {{ end }}
      volumes:
        - name: gui-config
          configMap:
            name: gui-config
        - name: nginx-conf-storage
          persistentVolumeClaim:
            claimName: nginx-conf-claim
        {{ if .Values.gui.ssl.enable }}
        - name: lets-encrypt-ssl-storage
          persistentVolumeClaim:
            claimName: lets-encrypt-ssl-claim
        {{ end }}
---
kind: Service
apiVersion: v1
metadata:
  name: ac-gui-svc
  namespace: {{ .Values.namespace }}
spec:
  loadBalancerIP: {{ .Values.gui.publicIp }}
  type: LoadBalancer
  selector:
    app: ac-gui
  ports:
    # always enabled to redirect to https and for certbot
    - name: http
      protocol: TCP
      port: 80
      targetPort: http
    {{- if .Values.gui.ssl.enable }}
    - name: https
      protocol: TCP
      port: 443
      targetPort: https
    {{- end }}
