# Default values for home-anthill.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
namespace: home-anthill
domainName: "your-domain.com"

domains:
  http: 
    name: "your-domain.com"
    publicIp: "1.2.3.4"
    ssl:
      enable: false
      
  mqtt: 
    name: "mqtt-domain.com"
    publicIp: "9.8.7.6"
    ssl:
      enable: false

letsencrypt:
  email: "your.email@emailexample.com"
  server:
    env: "prod"
    path: "https://acme-v02.api.letsencrypt.org/directory"
  # server:
  #   # attention: if you want to use staging server, you should update CA cert in sensors and devices firmwares,
  #   # because firmwares have the let's encrypt rootCA, but for staging you should use the public cert as CA 
  #   env: "staging"
    # path: "https://acme-staging-v02.api.letsencrypt.org/directory"

# public MQTT server
mosquitto:
  image: "ks89/mosquitto:v2.0.1"
  serviceName: "mosquitto-svc"
  dataFolder: "/root/mosquitto-persistence-data"
  auth:
    enable: true
    username: "mosquser"
    password: "Password1!"

# internal redis server
redis:
  image: "redis:8"
  serviceName: "redis-svc"
  dataFolder: "/root/redis-data"

# internal rabbitmq server
rabbitmq:
  image: "rabbitmq:4-management"
  # serviceName is by default 'rabbitmq'
  user: "rabbituser"
  password: "rabbitpassword" # dafault value, please replace this with your custom valves file

# external mongodb service
mongodbUrl: "mongodb+srv://user:password@cluster0.1234.mongodb.net"

# web app
gui:
  image: "ks89/gui:v2.1.0"
  serviceName: "gui-svc"

admission:
  image: "ks89/admission:v1.0.0"
  serviceName: admission-svc
  nginxServiceName: admission-nginx-svc
  grpc: 
    libraryLogEnable: false
  sensors:
    enable: true

apiDevices:
  image: "ks89/api-devices:v1.2.0"
  serviceName: api-devices-svc
  grpc: 
    libraryLogEnable: false

apiServer:
  image: "ks89/api-server:v2.0.0"
  serviceName: api-server-svc
  singleUserLoginEmail: "your.email@emailexample.com"
  jwtPassword: "D%$ZmPh@6WMc$=@!a-pQaa_+?zu4+3iF"
  cookieSecret: "@DbTN*jA"
  oauth2ClientID: "6caa41f023f6205b1c05"
  oauth2SecretID: "5ac42264964d85e4c2e938b4534d02f4d2b8b336"
  oauth2AppClientID: "79aa41f023f6205b1c05"
  oauth2AppSecretID: "009264964d85e4c2e938b4534d02f4d2b8b336"
  grpc: 
    libraryLogEnable: false
  sensors:
    enable: true

register:
  image: "ks89/register:v1.2.0"
  serviceName: "register-svc"
  # secret key used by the Rocket Framework
  rocketSecretKey:
    # don't use these in production, please generate your secrets with
    # `openssl rand -base64 32`
    debug: "VQUpMTsnFNA1hniY1fcNN9O2yyuJ43paS6sc4GZX8sM="
    release: "K9hJyBpkTIa06ouMM4EtFKTMMoZc2W6SiBabgbrlDC4="

producer:
  image: "ks89/producer:v1.1.0"
  serviceName: producer-svc

consumer:
  image: "ks89/consumer:v1.2.0"
  serviceName: consumer-svc

online:
  image: "ks89/online:v1.1.0"
  serviceName: online-svc
  # secret key used by the Rocket Framework
  rocketSecretKey:
    # don't use these in production, please generate your secrets with
    # `openssl rand -base64 32`
    debug: "VQUpMTsnFNA1hniY1fcNN9O2yyuJ43paS6sc4GZX8sM="
    release: "K9hJyBpkTIa06ouMM4EtFKTMMoZc2W6SiBabgbrlDC4="

onlineReceiver:
  image: "ks89/online-receiver:v1.1.0"

onlineAlarm:
  image: "ks89/online-alarm:v1.1.0"
  # secret key used by the Rocket Framework
  rocketSecretKey:
    # don't use these in production, please generate your secrets with
    # `openssl rand -base64 32`
    debug: "VQUpMTsnFNA1hniY1fcNN9O2yyuJ43paS6sc4GZX8sM="
    release: "K9hJyBpkTIa06ouMM4EtFKTMMoZc2W6SiBabgbrlDC4="
  firebaseServiceAccount:
    {
      "type": "service_account",
      "project_id": "<PROJECT_ID>",
      "private_key_id": "<FAKE_PRIVATE_ID>",
      "private_key": "-----BEGIN PRIVATE KEY-----\nYOUR_KEY_HERE==\n-----END PRIVATE KEY-----\n",
      "client_email": "firebase-adminsdk-204wn@<PROJECT_ID>.iam.gserviceaccount.com",
      "client_id": "<CLIENT_ID>",
      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
      "token_uri": "https://oauth2.googleapis.com/token",
      "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
      "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-204wn%40<PROJECT_ID>.iam.gserviceaccount.com",
      "universe_domain": "googleapis.com"
    }

# debug configuration, not for production environment
debug:
  pods:
    alwaysPullContainers: true
    # if your pods are crashing, you can enable this to prevent restarts
    # and to access them using your terminal.
    #Â Don't enable this on a production environment!!!
    sleepInfinity: false