---
apiVersion: v1
kind: ConfigMap
metadata:
  name: online-receiver-config
  namespace: {{ .Values.namespace }}
data:
  .env: |-
    REDIS_URI=redis://{{ .Values.redis.serviceName }}.{{ .Values.namespace }}.svc.cluster.local:6379
    {{- if .Values.domains.mqtt.ssl.enable }}
    MQTT_URL={{ .Values.domains.mqtt.name }}
    MQTT_PORT=8883
    MQTT_TLS=true
    {{- if eq "prod" .Values.letsencrypt.server.env  }}
    ROOT_CA=/etc/ssl/certs/ISRG_Root_X1.pem
    {{ else }}
    ROOT_CA=/tls-cert/tls.crt
    {{ end -}}
    MQTT_CERT_FILE=/tls-cert/tls.crt
    MQTT_KEY_FILE=/tls-cert/tls.key
    {{ else }}
    MQTT_URL={{ .Values.mosquitto.serviceName }}.{{ .Values.namespace }}.svc.cluster.local
    MQTT_PORT=1883
    MQTT_TLS=false
    ROOT_CA=
    MQTT_CERT_FILE=
    MQTT_KEY_FILE=
    {{ end -}}
    MQTT_CLIENT_ID=online-receiver
    {{- if .Values.mosquitto.auth.enable }}
    MQTT_AUTH=true
    MQTT_USER={{ .Values.mosquitto.auth.username }}
    MQTT_PASSWORD={{ .Values.mosquitto.auth.password }}
    {{ else }}
    MQTT_AUTH=false
    MQTT_USER=
    MQTT_PASSWORD=
    {{ end }}
  # log4rs.yaml: |-
  #   appenders:
  #     stdout:
  #       kind: console
  #     file:
  #       kind: rolling_file
  #       path: logs/app.log
  #       encoder:
  #         pattern: "{d(%Y-%m-%d %H:%M:%S)} | {({l}):5.5} | {f}:{L} â€” {m}{n}"
  #       policy:
  #         trigger:
  #           kind: size
  #           limit: 30 mb
  #         roller:
  #           kind: fixed_window
  #           pattern: logs/app_{}.log
  #           count: 5
  #           base: 1

  #   root:
  #     level: info
  #     appenders:
  #       - stdout

  #   loggers:
  #     file:
  #       level: info
  #       appenders:
  #         - app
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: online-receiver
  namespace: {{ .Values.namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: online-receiver
  template:
    metadata:
      labels:
        app: online-receiver
    spec:
      initContainers:
        - name: init-certs
          image: alpine
          command: 
            - "/bin/sh"
            - "-c"
            - |
              cp /etc/tls/cert-issuer-mqtt/tls.crt /tls-cert/tls.crt
              cp /etc/tls/cert-issuer-mqtt/tls.key /tls-cert/tls.key
          volumeMounts:
            - name: tls
              mountPath: /tls-cert
            - name: certmqtt
              mountPath: /etc/tls/cert-issuer-mqtt
      containers:
      - name: online-receiver
        image: {{ .Values.onlineReceiver.image }}
        {{- if .Values.debug.pods.alwaysPullContainers }}
        imagePullPolicy: Always
        {{- end }}
        {{- if .Values.debug.pods.sleepInfinity }}
        command: ["/bin/sh"]
        args: ["-c", "chmod +x /app/online; /app/online; sleep Infinity;"]
        {{- end }}
        volumeMounts:
        - name: online-receiver-config
          mountPath: /app/.env
          subPath: .env
          readOnly: true
        # - name: online-receiver-config
        #   mountPath: /app/log4rs.yaml
        #   subPath: log4rs.yaml
        #   readOnly: true
        - name: tls
          mountPath: /tls-cert
      volumes:
      - name: online-receiver-config
        configMap:
          name: online-receiver-config
      - name: certmqtt
        secret:
          secretName: mqtt-tls
      - name: tls
        emptyDir: {}