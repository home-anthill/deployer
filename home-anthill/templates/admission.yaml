---
apiVersion: v1
kind: ConfigMap
metadata:
  name: admission-config
  namespace: {{ .Values.namespace }}
data:
  .env: |-
    MONGODB_URL={{ .Values.mongodbUrl }}
    HTTP_SERVER=http://{{ .Values.domains.http.name }}
    HTTP_PORT=80
    HTTP_CORS=false
    HTTP_SENSOR_SERVER=http://{{ .Values.register.serviceName }}.{{ .Values.namespace }}.svc.cluster.local
    HTTP_SENSOR_PORT=80
    HTTP_SENSOR_GETVALUE_API=/sensors/
    HTTP_SENSOR_REGISTER_API=/sensors/register/
    HTTP_SENSOR_KEEPALIVE_API=/keepalive/
    GRPC_URL={{ .Values.apiDevices.serviceName }}.{{ .Values.namespace }}.svc.cluster.local:50051
    GRPC_TLS=false
    CERT_FOLDER_PATH=
    INTERNAL_CLUSTER_PATH={{ .Values.admission.serviceName }}.{{ .Values.namespace }}.svc.cluster.local
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: admission
  namespace: {{ .Values.namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: admission
  template:
    metadata:
      labels:
        app: admission
    spec:
      containers:
      - name: admission
        image: {{ .Values.admission.image }}
        imagePullPolicy: Always
        readinessProbe:
          httpGet:
            path: /admission/keepalive
            port: http
          periodSeconds: 30
        livenessProbe:
          httpGet:
            path: /admission/keepalive
            port: http
          periodSeconds: 60
          failureThreshold: 2
        env:
        - name: ENV
          value: "prod"
        {{- if .Values.admission.grpc.libraryLogEnable }}
        - name: GRPC_GO_LOG_SEVERITY_LEVEL
          value: "info"
        - name: GRPC_GO_LOG_VERBOSITY_LEVEL
          value: "2"
        {{- end }}
        ports:
        - name: http
          containerPort: 80
          protocol: TCP
        volumeMounts:
        - name: admission-config
          mountPath: /.env
          subPath: .env
          readOnly: true
      volumes:
      - name: admission-config
        configMap:
          name: admission-config
---
kind: Service
apiVersion: v1
metadata:
  name: {{ .Values.admission.serviceName }}
  namespace: {{ .Values.namespace }}
spec:
  selector:
    app: admission
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: http
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: admission-nginx-config
  namespace: {{ .Values.namespace }}
data:
  # nginx.conf used by the static web app
  # with proxy_pass to api server
  nginx.conf: |-
    events {
        worker_connections 1024;
    }

    http {
      server_tokens off;

      server {
        listen 80;
        listen  [::]:80;
        {{- if .Values.domains.http.name }}
        server_name  {{ .Values.domains.http.name }} www.{{ .Values.domains.http.name }};
        {{- end }}

        location /admission {
          proxy_pass http://{{ .Values.admission.serviceName }}.{{ .Values.namespace }}.svc.cluster.local:80;
          proxy_set_header X-Forwarded-For $remote_addr;
          proxy_set_header Host            $http_host;
        }
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: admission-nginx
  namespace: {{ .Values.namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: admission-nginx
  template:
    metadata:
      labels:
        app: admission-nginx
    spec:
      containers:
      - name: admission-nginx
        image: {{ .Values.admission.nginxImage }}
        ports:
          # always enabled to redirect to https
          - name: http
            containerPort: 80
            protocol: TCP
        volumeMounts:
          - name: admission-nginx-config
            mountPath: /etc/nginx/nginx.conf
            subPath: nginx.conf
            readOnly: true
      volumes:
        - name: admission-nginx-config
          configMap:
            name: admission-nginx-config
---
kind: Service
apiVersion: v1
metadata:
  name: {{ .Values.admission.nginxServiceName }}
  namespace: {{ .Values.namespace }}
spec:
  selector:
    app: admission-nginx
  ports:
    # always enabled to redirect to https and for certbot
    - name: http
      protocol: TCP
      port: 80
      targetPort: http