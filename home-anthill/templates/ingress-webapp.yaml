---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: webapp-ingress
  {{- if .Values.domains.http.ssl.enable }}
  annotations:
    cert-manager.io/issuer: "cert-issuer-webapp"
    nginx.ingress.kubernetes.io/rewrite-target: "/"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/redirect-to-https: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/client-max-body-size: "100m"
    nginx.ingress.kubernetes.io/limit-rps: "100"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Frame-Options "sameorigin";
      add_header X-Content-Type-Options nosniff;
      add_header Referrer-Policy 'same-origin';
      add_header Permissions-Policy "accelerometer=(), camera=(), geolocation=(), gyroscope=(), magnetometer=(), microphone=(), payment=(), usb=()";
      more_set_headers "Content-Security-Policy: child-src 'none'; connect-src 'self' https://*.google.com/ https://*.googleusercontent.com/ https://*.fbsbx.com/ https://*.googleapis.com/ https://*.gstatic.com/; default-src 'none'; font-src 'self' https://*.gstatic.com/; form-action 'self'; frame-ancestors 'none'; frame-src 'none'; img-src 'self' data: https://*.google.com/ https://*.googleusercontent.com/ https://*.fbsbx.com/ https://*.gstatic.com/ https://*.githubusercontent.com/; manifest-src 'self'; media-src 'none'; object-src 'none'; sandbox allow-forms allow-scripts allow-same-origin allow-popups; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline' https://*.googleapis.com/; worker-src 'self' https://*.google.com/ https://*.googleusercontent.com/ https://*.fbsbx.com/ https://*.googleapis.com/ https://*.gstatic.com/; base-uri 'self'; require-trusted-types-for 'script'";
  {{- end }}
  namespace: {{ .Values.namespace }}
spec:
  ingressClassName: http-nginx
  {{- if .Values.domains.http.ssl.enable }}
  tls:
  - hosts:
    - {{ .Values.domains.http.name }}
    - "www.{{ .Values.domains.http.name }}"
    secretName: webapp-tls
  {{- end }}
  rules:
  - host: {{ .Values.domains.http.name }}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: {{ .Values.gui.serviceName }}
            port:
              number: 80
  - host: "www.{{ .Values.domains.http.name }}"
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: {{ .Values.gui.serviceName }}
            port:
              number: 80
{{- if .Values.domains.http.ssl.enable }}
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: cert-issuer-webapp
  namespace: {{ .Values.namespace }}
spec:
  acme:
    server: {{ .Values.letsencrypt.server.path }}
    email: {{ .Values.letsencrypt.email }}
    # Name of a secret used to store the ACME account private key
    privateKeySecretRef:
      name: cert-issuer-webapp
    solvers:
      - http01:
          ingress:
            ingressClassName: http-nginx
{{- end }}
