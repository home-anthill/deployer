---
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-server-config
  namespace: {{ .Values.namespace }}
data:
  .env: |-
    MONGODB_URL={{ .Values.mongodbUrl }}
    HTTP_SERVER=http://{{ .Values.domains.http.name }}
    HTTP_PORT=80
    HTTP_CORS=false
    OAUTH2_CALLBACK=http://{{ .Values.domains.http.name }}/api/callback
    OAUTH2_CLIENTID={{ .Values.apiServer.oauth2ClientID }}
    OAUTH2_SECRETID={{ .Values.apiServer.oauth2SecretID }}
    OAUTH2_APP_CALLBACK=http://{{ .Values.domains.http.name }}/api/app_callback
    OAUTH2_APP_CLIENTID={{ .Values.apiServer.oauth2AppClientID }}
    OAUTH2_APP_SECRETID={{ .Values.apiServer.oauth2AppSecretID }}
    HTTP_SENSOR_SERVER=http://{{ .Values.register.serviceName }}.{{ .Values.namespace }}.svc.cluster.local
    HTTP_SENSOR_PORT=80
    HTTP_SENSOR_GETVALUE_API=/sensors/
    HTTP_SENSOR_REGISTER_API=/sensors/register/
    HTTP_SENSOR_KEEPALIVE_API=/keepalive/
    HTTP_ONLINE_SERVER=http://{{ .Values.online.serviceName }}.{{ .Values.namespace }}.svc.cluster.local
    HTTP_ONLINE_PORT=80
    HTTP_ONLINE_API=/online/
    HTTP_ONLINE_FCMTOKEN_API=/fcmtoken/
    HTTP_ONLINE_KEEPALIVE_API=/keepalive/
    GRPC_URL={{ .Values.apiDevices.serviceName }}.{{ .Values.namespace }}.svc.cluster.local:50051
    GRPC_TLS=false
    CERT_FOLDER_PATH=
    {{- if .Values.apiServer.singleUserLoginEmail }}
    SINGLE_USER_LOGIN_EMAIL={{ .Values.apiServer.singleUserLoginEmail }}
    {{ else }}
    SINGLE_USER_LOGIN_EMAIL=
    {{ end }}
    JWT_PASSWORD={{ .Values.apiServer.jwtPassword }}
    COOKIE_SECRET={{ .Values.apiServer.cookieSecret }}
    INTERNAL_CLUSTER_PATH={{ .Values.apiServer.serviceName }}.{{ .Values.namespace }}.svc.cluster.local
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-server
  namespace: {{ .Values.namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api-server
  template:
    metadata:
      labels:
        app: api-server
    spec:
      containers:
      - name: api-server
        image: {{ .Values.apiServer.image }}
        imagePullPolicy: Always
        readinessProbe:
          httpGet:
            path: /api/keepalive
            port: http
          periodSeconds: 30
        livenessProbe:
          httpGet:
            path: /api/keepalive
            port: http
          periodSeconds: 60
          failureThreshold: 2
        env:
        - name: ENV
          value: "prod"
        {{- if .Values.apiServer.grpc.libraryLogEnable }}
        - name: GRPC_GO_LOG_SEVERITY_LEVEL
          value: "info"
        - name: GRPC_GO_LOG_VERBOSITY_LEVEL
          value: "2"
        {{- end }}
        ports:
        - name: http
          containerPort: 80
          protocol: TCP
        volumeMounts:
        - name: api-server-config
          mountPath: /.env
          subPath: .env
          readOnly: true
      volumes:
      - name: api-server-config
        configMap:
          name: api-server-config
---
kind: Service
apiVersion: v1
metadata:
  name: {{ .Values.apiServer.serviceName }}
  namespace: {{ .Values.namespace }}
spec:
  selector:
    app: api-server
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: http