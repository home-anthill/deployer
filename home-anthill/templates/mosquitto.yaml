---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mosquitto-config
  namespace: {{ .Values.namespace }}
data:
  mosquitto.conf: |-
    persistence true
    persistence_location /mosquitto/data
    allow_anonymous true
    connection_messages true
    log_type all

    {{- if .Values.domains.mqtt.ssl.enable }}
    # secure connection are available externally
    listener 8883
    # taken from https://www.digitalocean.com/community/tutorials/how-to-install-and-secure-the-mosquitto-mqtt-messaging-broker-on-ubuntu-18-04
    # I need to copy let's encrypt files to another destination to be able
    # to set right owner and permissions
    certfile /etc/mosquitto/certs/cert.pem
    cafile /etc/mosquitto/certs/chain.pem
    keyfile /etc/mosquitto/certs/privkey.pem
    {{- else }}
    # insecure connections via 1883 disabled
    listener 1883
    {{- end }}

    {{- if .Values.mosquitto.auth.enable }}
    password_file /etc/mosquitto/password_file
    {{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mosquitto
  namespace: {{ .Values.namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mosquitto
  template:
    metadata:
      labels:
        app: mosquitto
    spec:
      containers:
      - name: mosquitto
        image: {{ .Values.mosquitto.image }}
        imagePullPolicy: Always
        env:
        {{ if .Values.domains.mqtt.ssl.enable }}
        - name: MOSQUITTO_SSL_ENABLE
          value: "true"
        - name: LETSENCRYPT_SERVER_ENV
          value: {{ .Values.letsencrypt.server.env }}
        {{- end }}
        {{- if .Values.mosquitto.auth.enable }}
        - name: MOSQUITTO_USERNAME
          value: {{ .Values.mosquitto.auth.username }}
        - name: MOSQUITTO_PASSWORD
          value: {{ .Values.mosquitto.auth.password }}
        {{- end }}
        ports:
        {{- if .Values.domains.mqtt.ssl.enable }}
        - name: mqtts
          containerPort: 8883
          protocol: TCP
        {{- else }}
        - name: mqtt
          containerPort: 1883
          protocol: TCP
        {{- end }}
        volumeMounts:
          - name: data
            mountPath: "/mosquitto/data"
          - name: mosquitto-config
            mountPath: /mosquitto/config/mosquitto.conf
            subPath: mosquitto.conf
            readOnly: true
          {{ if .Values.domains.mqtt.ssl.enable }}
          # mount tls certificate to be read from the app
          - name: tls
            # mount certificates here, but the container run.sh script
            # will copy these files to be used by mosquitto
            mountPath: "/tls"
            readOnly: true
          {{ end }}
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: mosquitto-data-claim
        - name: mosquitto-config
          configMap:
            name: mosquitto-config
        {{ if .Values.domains.mqtt.ssl.enable }}
        # volume to get tls certificate from certmanager via csi-driver
        - name: tls
          csi:
            driver: csi.cert-manager.io
            readOnly: true
            volumeAttributes:
              csi.cert-manager.io/issuer-name: cert-issuer-mqtt
              csi.cert-manager.io/dns-names: "{{ .Values.domains.mqtt.name }}"
        {{ end }}
---
kind: Service
apiVersion: v1
metadata:
  name: mosquitto-svc
  namespace: {{ .Values.namespace }}
spec:
  selector:
    app: mosquitto
  ports:
    {{- if .Values.domains.mqtt.ssl.enable }}
    # expose mqtts port
    - name: mqtts
      protocol: TCP
      port: 8883
      targetPort: mqtts
    {{- else }}
    # expose mqtt port
    - name: mqtt
      protocol: TCP
      port: 1883
      targetPort: mqtt
    {{- end }}